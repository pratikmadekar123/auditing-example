package com.in.report.service;
import java.awt.Color;
import java.awt.Dimension;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;

import javax.sql.DataSource;

import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Drawing;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Picture;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;

@Service
public class ReportService {
	@Value("classpath:static/company-logo.png") // Put your logo in src/main/resources/static/
	private Resource logoResource;

	@Autowired
	private DataSource dataSource;

	public byte[] generateEmployeeReport() throws JRException, SQLException {
		// Load .jrxml or compiled .jasper file	
		InputStream reportStream = getClass().getResourceAsStream("/reports/salreport.jrxml");
		JasperReport jasperReport = JasperCompileManager.compileReport(reportStream);
		// Fill report using DB connection
		try (Connection conn = dataSource.getConnection()) {
			JasperPrint print = JasperFillManager.fillReport(jasperReport, new HashMap<>(), conn);
			return JasperExportManager.exportReportToPdf(print); // PDF byte[]
		}
	}
	public byte[] generateAmlockReport(String fromDate, String toDate) throws IOException {
		try (XSSFWorkbook workbook = new XSSFWorkbook();
				ByteArrayOutputStream out = new ByteArrayOutputStream();
				InputStream logoStream = logoResource.getInputStream()) {

			// Create styles
			CellStyle headerStyle = createHeaderStyle(workbook);
			CellStyle titleStyle = createTitleStyle(workbook);
			CellStyle metaStyle = createMetaStyle(workbook);
			CellStyle normalStyle = createNormalStyle(workbook);
			CellStyle statusAStyle = createStatusAStyle(workbook);
			CellStyle statusEStyle = createStatusEStyle(workbook);

			Sheet sheet = workbook.createSheet("AMLOCK Report");

			// Add logo (row 0-2)
			int rowNum = 0;
			addLogo(workbook, sheet, logoStream, rowNum);
			rowNum += 3; // Leave space after logo

			// Add report title (merged cells)
			Row titleRow = sheet.createRow(rowNum++);
			Cell titleCell = titleRow.createCell(0);
			titleCell.setCellValue("AMLOCK REPORT");
			titleCell.setCellStyle(titleStyle);
			sheet.addMergedRegion(new CellRangeAddress(rowNum-1, rowNum-1, 0, 6));

			// Add metadata
			Row metaRow1 = sheet.createRow(rowNum++);
			setMetaCell(metaRow1, 0, "Status As On: " + LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")), metaStyle);
			sheet.addMergedRegion(new CellRangeAddress(rowNum-1, rowNum-1, 0, 6));

			Row metaRow2 = sheet.createRow(rowNum++);
			setMetaCell(metaRow2, 0, "Report Generated By: Supervisor2 Checker", metaStyle);
			sheet.addMergedRegion(new CellRangeAddress(rowNum-1, rowNum-1, 0, 6));

			Row metaRow3 = sheet.createRow(rowNum++);
			setMetaCell(metaRow3, 0, "Description: NG_THR_INVARD_AMLOCK_REPORT", metaStyle);
			sheet.addMergedRegion(new CellRangeAddress(rowNum-1, rowNum-1, 0, 6));

			Row metaRow4 = sheet.createRow(rowNum++);
			setMetaCell(metaRow4, 0, String.format("Criteria - From Date:%s, To Date:%s", fromDate, toDate), metaStyle);
			sheet.addMergedRegion(new CellRangeAddress(rowNum-1, rowNum-1, 0, 6));

			// Add empty row
			rowNum++;

			// Create header row
			Row headerRow = sheet.createRow(rowNum++);
			String[] headers = {"S.No.", "WID", "FRAME NAME", "DETAILS", "LIST NAME", "ENTITY_ID", "Status","Country"};
			for (int i = 0; i < headers.length; i++) {
				Cell cell = headerRow.createCell(i);
				cell.setCellValue(headers[i]);
				cell.setCellStyle(headerStyle);
			}

			// Add data rows
			addReportData(sheet, rowNum++, normalStyle, statusAStyle, statusEStyle);

			// Add footer
			Row footerRow = sheet.createRow(sheet.getLastRowNum() + 2);
			setMetaCell(footerRow, 0, "Maximum record display limit reached.", metaStyle);
			sheet.addMergedRegion(new CellRangeAddress(sheet.getLastRowNum(), sheet.getLastRowNum(), 0, 6));

			Row footerRow2 = sheet.createRow(sheet.getLastRowNum() + 1);
			setMetaCell(footerRow2, 0, "--- End of report ---", metaStyle);
			sheet.addMergedRegion(new CellRangeAddress(sheet.getLastRowNum(), sheet.getLastRowNum(), 0, 6));

			// Auto-size columns
			for (int i = 0; i < headers.length; i++) {
				sheet.autoSizeColumn(i);
			}

			workbook.write(out);
			return out.toByteArray();
		}
	}
	private void addLogo(XSSFWorkbook workbook, Sheet sheet, InputStream logoStream, int startRow) throws IOException {
		// Add logo image
		byte[] bytes = logoStream.readAllBytes();
		int pictureIdx = workbook.addPicture(bytes, Workbook.PICTURE_TYPE_PNG);

		CellStyle style = workbook.createCellStyle();
		style.setAlignment(HorizontalAlignment.CENTER);
		style.setVerticalAlignment(VerticalAlignment.CENTER);

		// Create drawing patriarch
		Drawing<?> drawing = sheet.createDrawingPatriarch();
		CreationHelper helper = workbook.getCreationHelper();

		// Merge cells for logo (3 rows, full width)
		sheet.addMergedRegion(new CellRangeAddress(startRow, startRow+2, 0, 6));

		// Create anchor for logo positioning
		ClientAnchor anchor = helper.createClientAnchor();
		anchor.setAnchorType(ClientAnchor.AnchorType.MOVE_AND_RESIZE);

		// Set anchor to cover 3 columns width (centered in the 7-column merged area)
		anchor.setCol1(2);  // Start at column C (0-based index 2)
		anchor.setRow1(1);
		anchor.setCol2(4);  // End at column E (spanning 3 columns)
		anchor.setRow2(startRow+5); // Span 3 rows

		// Add the picture
		Picture pict = drawing.createPicture(anchor, pictureIdx);

		// Get image dimensions
		Dimension imageSize = pict.getImageDimension();

		// Calculate centering offsets (in EMU units)
		// These will center the image within the 3-column width
		int dx1 = (int)((anchor.getDx2() - imageSize.getWidth()) / 2);
		int dy1 = (int)((anchor.getDy2() - imageSize.getHeight()) / 2);

		// Apply centering with minimum offsets
		anchor.setDx1(Math.max(0, dx1));
		anchor.setDy1(Math.max(0, dy1));

		// Adjust row heights to accommodate logo
		for (int i = startRow; i <= startRow+2; i++) {
			Row row = sheet.getRow(i) != null ? sheet.getRow(i) : sheet.createRow(i);
			row.setHeightInPoints(25); // Slightly taller rows for logo
		}

		// Set column widths (narrower for non-logo columns)
		sheet.setColumnWidth(0, 5 * 256);  // Narrow first column
		sheet.setColumnWidth(1, 5 * 256);  // Narrow second column
		sheet.setColumnWidth(2, 15 * 256); // Logo column
		sheet.setColumnWidth(3, 15 * 256); // Logo column
		sheet.setColumnWidth(4, 15 * 256); // Logo column
		sheet.setColumnWidth(5, 5 * 256);  // Narrow column
		sheet.setColumnWidth(6, 5 * 256);  // Narrow column

		// Resize logo to fit the designated space

		pict.resize(0.5);

		// Create centered cell style for any text in these cells
		CellStyle centeredStyle = workbook.createCellStyle();
		centeredStyle.setAlignment(HorizontalAlignment.CENTER);
		centeredStyle.setVerticalAlignment(VerticalAlignment.CENTER);

		// Apply centered style to all cells in merged region
		for (int i = startRow; i <= startRow+2; i++) {
			Row row = sheet.getRow(i);
			for (int j = 0; j < 7; j++) {
				Cell cell = row.createCell(j);
				cell.setCellStyle(centeredStyle);
			}
		}
	}
	private void createReportHeader(Sheet sheet, CellStyle titleStyle, CellStyle metaStyle) {
		int rowNum = 3; // After logo rows

		// Report Title
		Row titleRow = sheet.createRow(rowNum++);
		Cell titleCell = titleRow.createCell(0);
		titleCell.setCellValue("AMLOCK REPORT");
		titleCell.setCellStyle(titleStyle);
		sheet.addMergedRegion(new CellRangeAddress(rowNum-1, rowNum-1, 0, 6));

		// Status Date
		Row dateRow = sheet.createRow(rowNum++);
		Cell dateCell = dateRow.createCell(0);
		dateCell.setCellValue("Status As On: " + LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")));
		dateCell.setCellStyle(metaStyle);
		sheet.addMergedRegion(new CellRangeAddress(rowNum-1, rowNum-1, 0, 6));

		// Generated By
		Row byRow = sheet.createRow(rowNum++);
		Cell byCell = byRow.createCell(0);
		byCell.setCellValue("Report Generated By: Supervisor2 Checker");
		byCell.setCellStyle(metaStyle);
		sheet.addMergedRegion(new CellRangeAddress(rowNum-1, rowNum-1, 0, 6));

		// Description
		Row descRow = sheet.createRow(rowNum++);
		Cell descCell = descRow.createCell(0);
		descCell.setCellValue("Description: NG_THR_INVARD_AMLOCK_REPORT");
		descCell.setCellStyle(metaStyle);
		sheet.addMergedRegion(new CellRangeAddress(rowNum-1, rowNum-1, 0, 6));

		// Criteria
		Row criteriaRow = sheet.createRow(rowNum++);
		Cell criteriaCell = criteriaRow.createCell(0);
		criteriaCell.setCellValue("Criteria - From Date:07-03-2025, To Date:07-03-2025");
		criteriaCell.setCellStyle(metaStyle);
		sheet.addMergedRegion(new CellRangeAddress(rowNum-1, rowNum-1, 0, 6));
	}
	private CellStyle createTitleStyle(XSSFWorkbook workbook) {
		CellStyle style = workbook.createCellStyle();
		Font font = workbook.createFont();
		font.setFontHeightInPoints((short)16);
		font.setBold(true);
		style.setFont(font);
		style.setAlignment(HorizontalAlignment.CENTER);
		style.setVerticalAlignment(VerticalAlignment.CENTER);
		return style;
	}

	private CellStyle createMetaStyle(XSSFWorkbook workbook) {
		CellStyle style = workbook.createCellStyle();
		Font font = workbook.createFont();
		font.setBold(true);
		style.setFont(font);
		style.setAlignment(HorizontalAlignment.LEFT);
		style.setVerticalAlignment(VerticalAlignment.CENTER);
		return style;
	}
	//	private CellStyle createTitleStyle(XSSFWorkbook workbook) {
	//        CellStyle style = workbook.createCellStyle();
	//        Font font = workbook.createFont();
	//        font.setFontHeightInPoints((short)16);
	//        font.setBold(true);
	//        font.setColor(IndexedColors.DARK_BLUE.getIndex());
	//        style.setFont(font);
	//        style.setAlignment(HorizontalAlignment.CENTER);
	//        return style;
	//    }
	private void addReportData(Sheet sheet, int startRow, CellStyle normalStyle, 
			CellStyle statusAStyle, CellStyle statusEStyle) {
		// Sample data - replace with your actual data
		Object[][] data = {
				{1, "YES-000008528705-TFIR", "REMITTER BANK COUNTRY NAME", "UNITED STATES", "AccuityEDDList", 5099928L, "A","India"},
				{2, "YES-000008528705-TFIR", "REMITTER BANK COUNTRY NAME", "UNITED STATES", "AccuityEDDList", 5099929L, "A","India"},
				{3, "YES-000008528705-TFIR", "REMITTER BANK COUNTRY NAME", "UNITED STATES", "AccuityEDDList", 5099927L, "E",""},
				{4, "YES-000008528706-TFIR", "REMITTER BANK COUNTRY NAME", "UNITED STATES", "AccuityEDDList", 5099928L, "A","India"},
				{5, "YES-000008528706-TFIR", "REMITTER BANK COUNTRY NAME", "UNITED STATES", "AccuityEDDList", 5099929L, "A","India"}
		};

		for (Object[] rowData : data) {
			Row row = sheet.createRow(startRow++);
			for (int i = 0; i < rowData.length; i++) {
				Cell cell = row.createCell(i);

				// Set cell value based on type
				if (rowData[i] instanceof Number) {
					cell.setCellValue(((Number) rowData[i]).doubleValue());
				} else {
					cell.setCellValue(rowData[i].toString());
				}

				// Apply conditional styling for status column
				cell.setCellStyle(normalStyle);
				//                if (i == 6) { // Status column
				//                    String status = rowData[i].toString();
				//                    if ("A".equals(status)) {
				//                        cell.setCellStyle(statusAStyle);
				//                    } else if ("E".equals(status)) {
				//                        cell.setCellStyle(statusEStyle);
				//                    }
				//                } else {
				//                    cell.setCellStyle(normalStyle);
				//                }
			}
		}
	}

	private CellStyle createHeaderStyle(XSSFWorkbook workbook) {
		CellStyle style = workbook.createCellStyle();
		Font font = workbook.createFont();
		font.setBold(true);
		font.setColor(IndexedColors.WHITE.getIndex());
		style.setFont(font);
		style.setFillForegroundColor(new XSSFColor(new Color(31, 73, 125), null));
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		style.setBorderBottom(BorderStyle.THIN);
		style.setBorderTop(BorderStyle.THIN);
		style.setBorderLeft(BorderStyle.THIN);
		style.setBorderRight(BorderStyle.THIN);
		style.setAlignment(HorizontalAlignment.CENTER);
		style.setVerticalAlignment(VerticalAlignment.CENTER);
		return style;
	}

	//    private CellStyle createMetaStyle(XSSFWorkbook workbook) {
	//        CellStyle style = workbook.createCellStyle();
	//        Font font = workbook.createFont();
	//        font.setBold(true);
	//        style.setFont(font);
	//        return style;
	//    }

	private CellStyle createNormalStyle(XSSFWorkbook workbook) {
		CellStyle style = workbook.createCellStyle();
		style.setBorderBottom(BorderStyle.THIN);
		style.setBorderTop(BorderStyle.THIN);
		style.setBorderLeft(BorderStyle.THIN);
		style.setBorderRight(BorderStyle.THIN);
		return style;
	}

	private CellStyle createStatusAStyle(XSSFWorkbook workbook) {
		CellStyle style = workbook.createCellStyle();
		style.setFillForegroundColor(new XSSFColor(new Color(146, 208, 80), null)); // Green
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		style.setAlignment(HorizontalAlignment.CENTER);
		return style;
	}

	private CellStyle createStatusEStyle(XSSFWorkbook workbook) {
		CellStyle style = workbook.createCellStyle();
		style.setFillForegroundColor(new XSSFColor(new Color(255, 102, 102), null)); // Red
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		style.setAlignment(HorizontalAlignment.CENTER);
		return style;
	}

	private void setMetaCell(Row row, int column, String value, CellStyle style) {
		Cell cell = row.createCell(column);
		cell.setCellValue(value);
		cell.setCellStyle(style);
	}

}